{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"index.html","title":"Documentation for pynxtools-apm","text":"<p>pynxtools-apm is a free and open-source data software for creating standardized semantic serializations of atom probe tomography and related field-ion microscopy data and metadata for research data management using NeXus, implemented with the goal to make scientific research data FAIR (findable, accessible, interoperable, and reusable).</p> <p>pynxtools-apm, which is a plugin for pynxtools, provides a tool for reading data and metadata from various proprietary and open data formats from technology partners of the atom probe community and standardizing it such that it is compliant with the NeXus application definition <code>NXapm</code>.</p> <p>pynxtools-apm is developed both as a standalone reader and as a tool within NOMAD, which is the open-source research data management platform for materials science we are developing with FAIRmat.</p> <p>pynxtools-apm solves the challenge of using heterogeneous and semantically ambiguous serialization formats which is common in atom probe research. In addition, it provides an interface for writing readers for different file formats to be mapped to NeXus.</p> <p>pynxtools-apm is useful for scientists from the atom probe community, for technology partners, software developers, and data providers who search for ways to make their data and metadata more completely aligned with the aims of the FAIR principles.  Specifically the tool is useful for research groups who wish to organize their research data based on an interoperable standard.</p> Project and community <ul> <li>NOMAD code guidelines </li> </ul> <p>Any questions or suggestions? Get in touch!</p> <p>The work is funded by the Deutsche Forschungsgemeinschaft (DFG, German Research Foundation) - 460197019 (FAIRmat).</p>"},{"location":"index.html#tutorial","title":"Tutorial","text":"<ul> <li>Installation guide</li> <li>Standalone usage</li> </ul>"},{"location":"index.html#how-to-guides","title":"How-to guides","text":""},{"location":"index.html#explanation","title":"Explanation","text":"<ul> <li>Scope and idea</li> </ul> <ul> <li>Known issues</li> </ul>"},{"location":"index.html#reference","title":"Reference","text":"<p>Here you can learn which specific pieces of information and concepts the plugin supports for the respective file formats of the atom probe tomography and field-ion microscopy communities.</p> <ul> <li>How to map pieces of information to NeXus</li> <li>APT file format</li> <li>ePOS file format</li> <li>POS file format</li> <li>RNG file format</li> <li>RRNG file format</li> <li>Matlab Atom Probe Toolbox ranging definitions</li> <li>OXCART instrument and pyccapt</li> <li>ATO file format</li> <li>ENV file format</li> <li>CSV file format</li> <li>Inspico file formats</li> <li>AMETEK/Cameca ROOT-based formats</li> <li>Automated charge state analysis</li> <li>Automated extraction of elements</li> </ul>"},{"location":"explanation/apmapp.html","title":"NOMAD App","text":"<p>pynxtools-apm provides the NOMAD research data management system with an optional NOMAD custom app that implements an example how to offer domain-specific search capabilities on atom probe data in NOMAD.</p>"},{"location":"explanation/issues.html","title":"Known issues","text":"<p>Feel free to drop them as issues here. In decreasing order of relevance we are aware of the following technical issues with pynxtools-apm and its use in NOMAD OASIS.</p>"},{"location":"explanation/issues.html#eventually-slow-charge-state-analysis","title":"Eventually slow charge state analysis","text":"<p>When the ranging definitions have molecular ions which are composed from many atoms and elements with many isotopes it is possible that the interpretation of the ranging definitions can take long. The situation is case dependent. The reason is that a combinatorial algorithm is used for identifying the charge state(s) from the ranging definitions. The computation time of this algorithm depends on the number of isotopic combinations.</p>"},{"location":"explanation/issues.html#warnings-about-non-finite-values-in-nomads-parsing-log","title":"Warnings about non-finite values in NOMAD's parsing log","text":"<p>NOMAD by definition does not index non-finite values in its elasticsearch software component. The charge state analysis typically though sets the half-life of each candidate to be infinite. This non-finite real value is picked up by NOMAD during the parsing stage and causes these warnings but does not cause the parsing to fail.</p>"},{"location":"explanation/issues.html#limits-on-the-complexity-of-molecular-ions","title":"Limits on the complexity of molecular ions","text":"<p>pynxtools-apm currently supports to define molecular ions with up to 32 atoms. This covers for almost all cases of molecular ions typically studied with atom probe. Note that in mass spectrometry fragments with a considerable larger number of atoms are observed but telling them apart in atom probe would in practice be even more complicated than it is in mass spectrometry. Users who seriously wish to have this limit raised should file an issue here.</p>"},{"location":"explanation/issues.html#too-many-ranging-definitions-when-working-with-paraprobe-toolbox-in-a-nomad-remote-tools-hub","title":"Too many ranging definitions when working with paraprobe-toolbox in a NOMAD Remote Tools Hub.","text":"<p>The post-processing software paraprobe-toolbox currently supports working with up to 255 ranging definitions. In all cases where we have seen range files from groups across the world where more ranging definitions have been made, these were typically duplicated definitions. The NeXus/HDF5 representation and NXapm allow to have more than 255 ranging definitions. However, entries with numbers above this limited may cause issues during post-processing with NORTH as not all analysis tools are able to deal with more than 255 ranging definitions.</p>"},{"location":"explanation/issues.html#ranging-definitions-occasionally-triggering-a-nomad-parsing-failure","title":"Ranging definitions occasionally triggering a NOMAD parsing failure","text":"<p>We observed two cases so far where parsing ranging definitions with both more than approximately thousand molecular ions did not parse successfully, likely because of running limitations as a consequence of conservative default settings in a default NOMAD installation related to elasticsearch.</p> <p>A more detailed overview for resolving molecular ions in atom probe is available in the literature.</p>"},{"location":"explanation/issues.html#slow-verification-of-instance-data-against-cardinality-and-existence-constraints-for-outdated-versions-of-pynxtools-apm","title":"Slow verification of instance data against cardinality and existence constraints for outdated versions of pynxtools-apm","text":"<p>Version of pynxtools-apm which used pynxtools&lt;=0.2.1 are known to face the issue that the verification of the instantiated schema can be slow. With pynxtools&gt;=0.3.1 this issues has been fixed thanks to a refactored verification algorithm.</p>"},{"location":"explanation/learn.html","title":"Scope and idea","text":"<p>pynxtools-apm offers the atom probe community a set of diverse examples that show how to standardize the diverse (meta)data from the research field of atom probe and field-ion microscopy to one representation. We would like to encourage the community to share example files with us. Ideally, these should be small and should come from diverse use cases and file formats.</p> <p>We are working together with the International Field Emission Society's (IFES) Atom Probe Technical Committee (APT TC) to improve the capabilities of the readers for the benefit of all atom probers.</p>"},{"location":"explanation/learn.html#workflow","title":"Workflow","text":"<p>The following diagram shows how <code>pynxtools-apm</code> processes data and metadata from different sources and how the plugin interacts with the core routines that are implemented in <code>pynxtools</code>.</p> <p></p>"},{"location":"how-tos/howto.html","title":"How-to","text":""},{"location":"reference/apt.html","title":"APT","text":"<p>The pynxtools-apm parser and normalizer reads the following content and maps them on respective NeXus concepts that are defined in the NXapm application definition:</p> APT NeXus/HDF5 Reconstructed positions (x, y, z) Mass-to-charge-state-ratio values (m/q) <p>The APT file format is a proprietary binary file format maintained by AMETEK/Cameca that contains additional pieces of information over traditionally used POS and ePOS formats. The ifes_apt_tc_data_modeling library&gt;=0.2.1 can read all these information to the level of detail that has been communicated to the public by AMETEK/Cameca. The parser is currently not mapping most of these data to NeXus although this is technically possible.</p>"},{"location":"reference/ato.html","title":"ATO","text":"<p>The pynxtools-apm parser and normalizer reads the following content and maps them on respective NeXus concepts that are defined in the NXapm application definition:</p> ATO NeXus/HDF5 Reconstructed positions (x, y, z) Mass-to-charge-state-ratio values (m/q) <p>The ATO format has been used in different places for different types of instruments. The format has seen an evolution of versions. Documentation for these in the scientific literature though is incomplete and not fully consistent. The ifes_apt_tc_data_modeling library reads v3 and v5 and applies a scaling to the reconstructed positions.</p> <p>Users of this parsing functionality should inspect carefully whether results such as reconstructed ion positions are parsed correctly. If this is not the case, it can safely be considered as a bug. In this case we would appreciate if you can file a bug/issue here so that we can fix such remaining issues with this parser.</p>"},{"location":"reference/atomtypes.html","title":"Automated extraction of elements in the dataset","text":"<p>All ranging definitions are post-processed by the parser to infer the elements. The set of unique chemical symbols for these elements is used to define the <code>/ENTRY[entry*]/specimen/atom_types</code> in the resulting NeXus/HDF5 file in accordance with the requirements that are defined by the <code>NXapm</code> application definition. NOMAD reads from this field during the nexus parsing stage into NOMAD Metainfo to enable element-specific search capabilities via the periodic table widget.</p>"},{"location":"reference/camecaroot.html","title":"AMETEK/Cameca CernROOT-based file formats","text":"<p>Please note that the proprietary file formats RRAW, STR, ROOT, RHIT, and HITS from AMETEK/Cameca are currently not processable with software other than provided by Cameca. We have investigated the situation and were able to confirm though that a substantial number of metadata have been documented by Cameca. In addition, we have done a successful proof-of-concept to explore a route of reading several pieces of information contained in all of these binary file formats using Python.</p> <p>The main motivation for this was to explore a route that could enable automated mapping and normalizing of some of the metadata into NeXus via a simpler - programmatic approach - than having users to enter the information via e.g. electronic lab notebooks or supplementary files. The main motivation to access the binary file structure directly in contrast to using a library such as from Cern's ROOT ecosystem is that every tool which would include a ROOT-capable pynxtools-apm plugin would also have to install at least some part of the versatile but functionally rich ROOT library. This may not be appropriate though in all cases when working with already complex research data management systems which have their own dependencies and thus adding ROOT would make the testing and handling of dependencies more intricate.</p> <p>AMETEK/Cameca has inspected the situation and works on an implementation of features in AP Suite that will eventually allow users to export some of these metadata via the AMETEK/Cameca APT file format that is open-source. Alternatively, also AMETEK/Cameca's custom plugin interface is a possible avenue how metadata could be exported in the future from AMETEK/Cameca to third-party software. When these features will be available, we are happy to work on an update of pynxtools-apm and the underlying ifes_apt_tc_data_modeling library to support the community.</p>"},{"location":"reference/contextualization.html","title":"How to map pieces of information to NeXus","text":"<p>Conceptually, mapping between representations of concepts and instance data is a key tasks in information science. The plugin pynxtools-apm implements this specifically for the file and serialization formats used within the research field of atom probe tomography. The plugin offloads this code from eventually other software where NeXus is used to avoid that every user and software developer has to make individual changes in their own tools.</p> <p>Technically, instance data representing concepts within the realm of one ontology, or a semantic file format like NeXus, are considered the source (<code>src</code>). Source data are mapped on instance data representing a concept in NeXus as the target (<code>trg</code>). This mapping is only performed by pynxtools-apm, if <code>src</code> and <code>trg</code> can be transformed such that <code>src</code> and <code>trg</code> are connected via a relationship such as <code>is_equivalent</code> or <code>same_as</code> relationship. A transformation can be as simple as that an instance <code>src</code> has an elementary data type (e.g. a string or a single-precision floating point value) that is copied into an instance <code>trg</code> using the same data type. In practice, though the situation is more complex such that the mapping demands further normalization or processing. One example is when <code>src</code> represents a tilt angle with unit radiants used at the <code>src</code> side but <code>trg</code> requires that this value should be stored in degrees and maybe even promoted from single precision to double precision. In this case, the transformation is composed of a copy, a multiplication, and value promoting of the value that was read from <code>src</code>, convert from radiants to degrees, and is finally returned as value behind <code>trg</code>.</p> <p>Such transformations are configured via the respective files in the config directory of pynxtools-apm. Upon parsing, it is the set of functions in mapping_functor.py which implements the actual transformations by reading the configuration and returning the properly formatted and transformed target to successively fill the <code>template</code> dictionary variable. The name functor is used because mapping may demand to use not only a copy or data type conversion as it was explained. It is this template variable from which core functions like convert.py of the pynxtools write the actual NeXus/HDF5 file. The latter tool is also referred to as the dataconverter of pynxtools.</p> <p>The actual reading of content from file formats is implemented in the ifes_apt_tc_data_modeling Python library. This project is backed by the International Field Emission Society (IFES). IFES acknowledges the project's aim to provide a single implementation of high quality and tested readers for file formats used in atom probe tomography to enable members of the community to work together instead of having to maintain a zoo of parsers. A similar activity that we here would like to acknowledge is rosettasciio.</p>"},{"location":"reference/csv.html","title":"CSV","text":"<p>The pynxtools-apm parser and normalizer reads the following content and maps them on respective NeXus concepts that are defined in the NXapm application definition:</p> CSV NeXus/HDF5 Reconstructed positions (x, y, z) Mass-to-charge-state-ratio values (m/q) <p>Occasionally, atom probers export portions of a reconstruction as comma-separated ASCII files. We consider this to be an unnecessary inefficient and inaccurate approach that should be replaced by self-descriptive formats like NeXus. In every case, at least a header should be specified which details the information that is stored in each column but examples from the literature show that this is not always supplied.</p> <p>The ifes_apt_tc_data_modeling library makes strong assumptions when trying to read atom probe content from a CSV file: - The format is comma-separated text - Splitting on the separator results in a table with one row for each ion and four columns. - The first three columns in sequence are mapped to reconstructed positions (x, y, z) i.e. like in POS - The fourth column is mapped to mass-to-charge-state-ratio values</p> <p>Users of this parsing functionality should inspect carefully whether the results are to their expectation. If this is not the case, feel free to submit an issue issue here so that we can inspect and eventually fix this issue or guide how to use possible alternatives.</p>"},{"location":"reference/env.html","title":"ENV","text":"<p>The pynxtools-apm parser and normalizer reads the following content and maps them on respective NeXus concepts that are defined in the NXapm application definition:</p> ENV NeXus/HDF5 (Molecular ion) number of elements and their multiplicity Mass-to-charge-state-ratio value interval for each molecular ion <p>The ENV file format has been developed by the GPM atom probe group in Rouen, France. The format stores instrument parameters and ranging definitions. The ifes_apt_tc_data_modeling library &gt;=0.2.1 currently ignores the instrument parameters but technically these could be parsed. The implementation is based on a very limited number of example files so the robustness of this parser should not be expected to be of as high quality than that of the other parsers.</p>"},{"location":"reference/epos.html","title":"ePOS","text":"<p>The pynxtools-apm parser and normalizer reads the following content and maps them on respective NeXus concepts that are defined in the NXapm application definition:</p> ePOS NeXus/HDF5 Reconstructed positions (x, y, z) Mass-to-charge-state-ratio values (m/q) <p>The file format contains additional pieces of information. The ifes_apt_tc_data_modeling library&gt;=0.2.1 can read all these information but the parser is currently not mapping it on NeXus.</p>"},{"location":"reference/faufig.html","title":"Matlab Atom Probe Toolbox ranging definitions","text":"<p>Matlab figures are not necessarily directly parsable using Python tools. This is relevant for interoperability when using e.g. the Matlab Atom Probe Toolbox from Prof. Felfer's group at the FAU Erlangen. This toolbox stores results as content-rich Matlab figures and HDF5 files.</p> <p>The ifes_apt_tc_data_modeling library &gt;=0.2.1 offers a Matlab script matlab/matlab_fig_to_txt.m that users should run first to convert these figures into an intermediate text-based file with the extension fig.txt.</p> <p>This text file has a simple structure: Each ranging definition is a single line with three parts separated by spaces: The first part is a human-readable description of the ion (element, isotope, molecular ion). We follow the naming convention of P. Felfer's atom-probe-toolbox. The second part is the left (minimum) bound while the third part is the right (maximum bound) bound of the mass-to-charge-state-ratio value interval of the ion that is specified in the first part. Details are available here</p> <p>Once converted to fig.txt, pynxtools-apm uses the ifes_apt_tc_data_modeling library's fig parser to process the ranging definitions.</p> fig.txt NeXus/HDF5 (Molecular ion) number of elements and their multiplicity Mass-to-charge-state-ratio value interval for each molecular ion Charge state"},{"location":"reference/inspico.html","title":"Inspico","text":"<p>Inspico is a spin-off company of the activities from the Stuttgart atom probe group lead by Prof. Schmitz. We would be happy to support parsing their formats via the ifes_apt_tc_data_modeling library.</p> <p>Feel free to file an issue here to get in contact with us.</p>"},{"location":"reference/mqanalysis.html","title":"Automated charge state analysis","text":"<p>Each ranging definition is post-processed by the parser and analyzed for whether it is possible to recover or confirm the charge state. For this the (molecular) ion structure (nuclides and their multiplicity) and mass-to-charge-state-ratio value is used to constrain a brute force analysis of all possible combinations of nuclides.</p>"},{"location":"reference/pos.html","title":"POS","text":"<p>The pynxtools-apm parser and normalizer reads the following content and maps them on respective NeXus concepts that are defined in the NXapm application definition:</p> POS NeXus/HDF5 Reconstructed positions (x, y, z) Mass-to-charge-state-ratio values (m/q)"},{"location":"reference/pyccapt.html","title":"OXCART instrument and pyccapt","text":"<p>pyccapt is an open-source control system for a custom-built atom probe as well as other instruments pioneered by Prof. Felfer and M. Monajem at the FAU Erlangen. The software is used to control their custom-built atom probe instrument OXCART. Pyccapt generates several HDF5 files which store key results and parameterization of an atom probe measurement.</p> <p>Pynxtools-apm can read all pieces of information that is stored in these files. Currently, the following pieces of information are configured to be mapped by default on respective NeXus concepts to serve as an example.</p> pyccapt reconstruction NeXus/HDF5 Reconstructed positions (x, y, z) Mass-to-charge-state-ratio values (m/q) pyccapt range NeXus/HDF5 (Molecular ion) number of elements and their multiplicity Mass-to-charge-state-ratio value interval for each molecular ion Charge state"},{"location":"reference/rng.html","title":"RNG","text":"<p>The pynxtools-apm parser and normalizer reads the following content and maps them on respective NeXus concepts that are defined in the NXapm application definition:</p> RNG NeXus/HDF5 (Molecular ion) number of elements and their multiplicity Mass-to-charge-state-ratio value interval for each molecular ion <p>The RNG file format is a text file format for storing ranging definitions that contains additional pieces of information like relevant volume of an ion assumed for reconstruction purposes or color. The ifes_apt_tc_data_modeling library==0.2.1 currently ignores these pieces of information. Occasionally, users define ions with custom name but unphysical details to it in an effort to enable a filtering of ions within specific mass-to-charge-state-ratio values. The ifes_apt_tc_data_modeling library &gt;= 0.2.1 reads these iontypes but discards their custom name.</p>"},{"location":"reference/rrng.html","title":"RRNG","text":"<p>The pynxtools-apm parser and normalizer reads the following content and maps them on respective NeXus concepts that are defined in the NXapm application definition:</p> RRNG NeXus/HDF5 (Molecular ion) number of elements and their multiplicity Mass-to-charge-state-ratio value interval for each molecular ion <p>The RRNG file format is a text file format for storing ranging definitions that contains additional pieces of information like relevant volume of an ion assumed for reconstruction purposes or color. The ifes_apt_tc_data_modeling library &gt;=0.2.1 currently ignores these pieces of information. Occasionally, users define ions with custom name but unphysical details to it in an effort to enable a filtering of ions within specific mass-to-charge-state-ratio values. The ifes_apt_tc_data_modeling library &gt;= 0.2.1 reads these iontypes but discards their custom name.</p> <p>In ifes_apt_tc_data_modeling library &gt;= 0.2.2 offers functionalities which avoid that duplicated ranging definitions are imported as storing these is unnecessary. Pynxtools-apm==0.1.1 is configured to not take advantage of this functionality though.</p>"},{"location":"tutorial/installation.html","title":"Installation","text":"<p>It is recommended to use python 3.12 with a dedicated virtual environment for this package. Learn how to manage python versions and virtual environments.</p> <p>This package is a reader plugin for <code>pynxtools</code> and thus should be installed together with <code>pynxtools</code>:</p> <pre><code>pip install pynxtools[apm]\n</code></pre> <p>for the latest development version.</p>"},{"location":"tutorial/nexusio.html","title":"How to use a NeXus/HDF5 file","text":"<p>The Jupyter notebook is available here</p>"},{"location":"tutorial/oasis.html","title":"Convert data to NeXus using NOMAD Oasis","text":""},{"location":"tutorial/standalone.html","title":"Convert electron microscopy data and metadata to NeXus","text":""},{"location":"tutorial/standalone.html#who-is-this-tutorial-for","title":"Who is this tutorial for?","text":"<p>This document is for people who want to standardize their research data by converting these into a NeXus standardized format.</p>"},{"location":"tutorial/standalone.html#what-should-you-know-before-this-tutorial","title":"What should you know before this tutorial?","text":"<ul> <li>You should have a basic understanding of FAIRmat NeXus and pynxtools</li> <li>You should have a basic understanding of using Python and Jupyter notebooks via JupyterLab</li> </ul>"},{"location":"tutorial/standalone.html#what-you-will-know-at-the-end-of-this-tutorial","title":"What you will know at the end of this tutorial?","text":"<p>You will have a basic understanding how to use pynxtools-apm for converting your APM data to a NeXus/HDF5 file.</p>"},{"location":"tutorial/standalone.html#steps","title":"Steps","text":""},{"location":"tutorial/standalone.html#installation","title":"Installation","text":"<p>See here for how to install pynxtools together with the APM reader plugin. Note that the reader is a combination of multiple readers each supporting a different set of versions of file formats used by key technology partners from the field of electron microscopy.</p>"},{"location":"tutorial/standalone.html#running-the-reader-from-the-command-line","title":"Running the reader from the command line","text":"<p>An example script to run the APM reader in <code>pynxtools</code>:</p> <pre><code>user@box:~$ dataconverter $&lt;apm-file path&gt; $&lt;apm-file path&gt; $&lt;eln-file path&gt; --reader apm --nxdl NXapm --output &lt;output-file path&gt;.nxs\n</code></pre> <p>Note that typically none of the supported file formats have data/values for all required and recommended fields and attributes in <code>NXapm</code>. In order for the validation step of the APM reader to pass, you need to provide an ELN file that contains the missing values if you would like to be fully compliant with the NXapm standard.</p>"},{"location":"tutorial/standalone.html#examples","title":"Examples","text":"<p>You can find examples how to use <code>pynxtools-apm</code> for your APM research data pipeline in <code>src/pynxtools_apm/nomad/examples</code>. These are designed for working with <code>NOMAD</code> and its <code>NOMAD Remote Tools Hub (NORTH)</code>.</p> <p>Congrats! You now have a FAIR NeXus file!</p>"}]}